

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Vector;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import static javax.swing.text.html.HTML.Tag.BR;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Ahmed
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        holename = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        holeadd = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        holesize = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        processname = new javax.swing.JTextArea();
        jScrollPane10 = new javax.swing.JScrollPane();
        processsize = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        menu = new javax.swing.JComboBox<>();
        compaction = new java.awt.Checkbox();
        start_btn = new java.awt.Button();
        exit_btn = new java.awt.Button();
        scroll = new javax.swing.JScrollPane();
        output = new javax.swing.JPanel();
        deallocatetext = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        deallocate = new java.awt.Checkbox();
        btn_deallocate = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MemoryAllocationProject");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("holes group"));
        jPanel1.setPreferredSize(new java.awt.Dimension(264, 187));

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        holename.setColumns(20);
        holename.setRows(5);
        holename.setText("h1\nh2\nh3\nh4\nh5");
        holename.setToolTipText("enter first hole name then press enter then second hole name then press enter ..\n");
        jScrollPane2.setViewportView(holename);

        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        holeadd.setColumns(20);
        holeadd.setRows(5);
        holeadd.setText("0\n100\n600\n800\n1100\n");
        holeadd.setToolTipText("enter firist hole name then press enter  then second hole name then press enter..");
        jScrollPane6.setViewportView(holeadd);

        jScrollPane8.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        holesize.setColumns(20);
        holesize.setRows(5);
        holesize.setText("100\n500\n200\n300\n600");
        holesize.setToolTipText("enter firist hole size then press enter  then second hole size then press enter..");
        jScrollPane8.setViewportView(holesize);

        jLabel1.setText("hole name");

        jLabel2.setText("starting add");

        jLabel3.setText("size");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane8))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Processes group"));

        jScrollPane7.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        processname.setColumns(20);
        processname.setRows(5);
        processname.setText("p0\np1\np3\np4");
        processname.setToolTipText("enter firist process name then press enter  then second process name then press enter..");
        jScrollPane7.setViewportView(processname);

        jScrollPane10.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        processsize.setColumns(20);
        processsize.setRows(5);
        processsize.setText("212\n417\n112\n426");
        processsize.setToolTipText("enter firist process size then press enter  then second process size then press enter..");
        jScrollPane10.setViewportView(processsize);

        jLabel4.setText(" name");

        jLabel5.setText("size");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );

        menu.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "chose allocation method", "first fit ", "best fit", "worst fit", " " }));

        compaction.setLabel("compaction");
        compaction.setName("compaction"); // NOI18N

        start_btn.setLabel("Go");
        start_btn.setName(""); // NOI18N
        start_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_btnActionPerformed(evt);
            }
        });

        exit_btn.setActionCommand("exit");
        exit_btn.setLabel("exit");
        exit_btn.setName("exit"); // NOI18N
        exit_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit_btnActionPerformed(evt);
            }
        });

        output.setBorder(javax.swing.BorderFactory.createTitledBorder("output"));
        output.setToolTipText("the outpt will appear here after you press Go");
        scroll.setViewportView(output);

        deallocatetext.setToolTipText("enter process name here to be deallocated");
        deallocatetext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deallocatetextActionPerformed(evt);
            }
        });

        jLabel6.setText("Process name to deallocate");

        deallocate.setLabel("DeAllocate");

        btn_deallocate.setLabel("DeAllocate");
        btn_deallocate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deallocateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(compaction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 21, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(deallocatetext, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deallocate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_deallocate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(start_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(exit_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(38, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addComponent(scroll))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(start_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exit_btn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(compaction, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(menu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deallocatetext, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn_deallocate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deallocate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

     
    LinkedList<hole> todraw=new LinkedList<hole>();
    LinkedList<hole> processes =new LinkedList<hole>();
    LinkedList<hole> holes=new LinkedList<hole>();
    private void start_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_btnActionPerformed
        // TODO add your handling code here:

       /*******************this part takes the user input and put it into linkedlists************************/
       
       
       String s = new String ();
        
        s=holename.getText();
        if(s.compareTo("")==0)
           JOptionPane.showMessageDialog(output.getParent(), "please enter holes names","error",0);
       LinkedList hname=new LinkedList();
       hname=stringtoLinkedList(s,1);
       //System.out.print(hname);         //to check if the linkedlist is correct
       //System.out.println();
      
       s=holeadd.getText();
        if(s.compareTo("")==0)
           JOptionPane.showMessageDialog(output.getParent(), "please enter holes addresses","error",0);
        LinkedList hadd=new LinkedList();
        hadd=stringtoLinkedList(s,0);           //this fn takes string and returns linked list
       // System.out.print(hadd);         //to check if the linked list is correct 
       // System.out.println();           //to print new line
       
        
       s=holesize.getText();
       if(s.compareTo("")==0)
           JOptionPane.showMessageDialog(output.getParent(), "please enter holes sizes","error",0);
       LinkedList hsize=new LinkedList();
       hsize=stringtoLinkedList(s,0);
       //System.out.print(hsize);         //to check if the linked list is correct
       //System.out.println();
       
       s=processname.getText();
      if(s.compareTo("")==0)
           JOptionPane.showMessageDialog(output.getParent(), "please enter processes names","error",0);

       LinkedList pname=new LinkedList();
       pname=stringtoLinkedList(s,1);
       //System.out.print(pname);             //to check if the linked list is correct
       //System.out.println();
       
       s=processsize.getText();
       if(s.compareTo("")==0)
           JOptionPane.showMessageDialog(output.getParent(), "please enter processes sizes","error",0);
       LinkedList psize=new LinkedList();
       psize=stringtoLinkedList(s,0);
//       System.out.print(psize);         
  //     System.out.println();
       
       holes.clear();
       todraw.clear();
       processes.clear();
       
       for(int i=0;i<hadd.size();i++)
       {
           hole m=new hole((String)hname.get(i),true,(int)hsize.get(i),(int)hadd.get(i));
           holes.add(m);
           
       }
       
       
       for(int i=0;i<psize.size();i++)
       {
           hole m=new hole((String)pname.get(i),false,(int)psize.get(i),0);
           processes.add(m);
       }
       ////////////////////////////////////////////////////////////////
       
       int flag=0;
       if(compaction.getState())
       {
           
           Iterator one=holes.iterator();
           Iterator two=holes.iterator();
           hole next = (hole) two.next();
           while(one.hasNext())
           {
               hole hole;
               if(two.hasNext())
               next=(hole) two.next();
               else break;
               hole current=(hole) one.next();
               if(current.getAddress()+current.getSize()==next.getAddress())
               {}
               else
                   flag=1;
                   
           }
           
       if(flag==1)
       { 
           JOptionPane.showMessageDialog(output.getParent(), "you cannot compact memory when there is a gape between holes \n gap: is a memory partition we don't know wether it is full with process or empty","error",0);
          
       }
    
       }
       
       
       ///////////////////////////////
        int box;
       box= menu.getSelectedIndex();
       
       if(box==0)
           JOptionPane.showMessageDialog(output.getParent(), "please chose allocation type then press Go");

       if(box==1)
       {    myallocator m=new myallocator();
       
        todraw =m.firstfit(holes,processes,compaction.getState());
         //  Draw(todraw);
       
       }
       else if(box==2)
           
       {
        myallocator m =new myallocator();
        todraw = m.bestfit(holes,processes,compaction.getState());
       // Draw(todraw);
       }
       else if (box==3)
       {
           
        myallocator m =new myallocator();
        todraw = m.worstfit(holes,processes,compaction.getState());
        //Draw(todraw);
       }
       
       
       Draw(todraw);
       
    }//GEN-LAST:event_start_btnActionPerformed

    private void exit_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit_btnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exit_btnActionPerformed

    private void deallocatetextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deallocatetextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deallocatetextActionPerformed

    private void btn_deallocateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deallocateActionPerformed
        // TODO add your handling code here:
        String dd =new String();
       dd=deallocatetext.getText();
      
       if(deallocate.getState())
       {
          int flag=0;
           Iterator it=todraw.iterator();
           Iterator nextit =todraw.iterator();
           Iterator previousit =todraw.iterator();
           hole next=(hole) nextit.next();
           hole prev=new hole();
           while(it.hasNext())
           {
               if(nextit.hasNext())
                  next = (hole) nextit.next();
               
               hole curp=(hole) it.next();
               if(dd.compareTo(curp.getName())==0)
               {
                   curp.setisEmpty(true);
                   curp.setName("new hole");
                   if(prev.getisEmpty()&&(prev.getAddress()+prev.getSize()==curp.getAddress()))
                   {
                       curp.setAddress(prev.getAddress());
                       curp.setSize(curp.getSize()+prev.getSize());
                       todraw.remove(prev);
                   }
                   if(next.getisEmpty()&&(curp.getAddress()+curp.getSize()==next.getAddress()))
                   {
                       curp.setSize(curp.getSize()+next.getSize());
                       todraw.remove(next);
                   }
                   flag=1;
                   break;
               }
                   previousit=it;
                   prev=curp;
           }
           if(flag==0)
           {
               JOptionPane.showMessageDialog(output.getParent(), "please enter correct process name","error",0);
               
           }
           
       }
       Iterator secondlastit = processes.iterator();
       while(secondlastit.hasNext())
       {
            hole curh2=(hole)secondlastit.next();
           if(curh2.getisEmpty())
           {
               processes.remove(curh2);
               break;
           }
       }
       
      Iterator itt=processes.iterator();
      LinkedList<hole> tobeallocate=new LinkedList<hole>();
      while(itt.hasNext())
      {
          hole desp=new hole();
          desp=(hole) itt.next();
          if(!desp.getGotDrawn())
          {
              tobeallocate.add(desp);
          }
          
      }
       
      Iterator ittobe=tobeallocate.iterator();
      
      while(ittobe.hasNext())
      {
          hole p=new hole();
       
          p=(hole) ittobe.next();
          Iterator it=todraw.iterator();
            while(it.hasNext())
            {
                
                hole h;
                h=(hole) it.next();
                if(h.getisEmpty())
                {
                     if(h.getSize()==p.getSize())
                      {
                        h.setisEmpty(false);
                        p.setAddress(h.getAddress());
                        p.setDrawn(true);
                        todraw.add(p);
                        todraw.remove(h);
                        break;
                       }
                     
                        else if (h.getSize()>p.getSize())
                        {
                           p.setAddress(h.getAddress());
                           h.setAddress(h.getAddress()+p.getSize());
                           h.setSize(h.getSize()-p.getSize());
                           p.setDrawn(true);
                           todraw.add(p);
                           break;
                        }
                     
                }
        
            }
       
      }
        Collections.sort(todraw);
        Draw(todraw);
    }//GEN-LAST:event_btn_deallocateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    java.awt.Button btn_deallocate;
    java.awt.Checkbox compaction;
    java.awt.Checkbox deallocate;
    javax.swing.JTextField deallocatetext;
    java.awt.Button exit_btn;
    javax.swing.JTextArea holeadd;
    javax.swing.JTextArea holename;
    javax.swing.JTextArea holesize;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JLabel jLabel5;
    javax.swing.JLabel jLabel6;
    javax.swing.JPanel jPanel1;
    javax.swing.JPanel jPanel2;
    javax.swing.JScrollPane jScrollPane10;
    javax.swing.JScrollPane jScrollPane2;
    javax.swing.JScrollPane jScrollPane6;
    javax.swing.JScrollPane jScrollPane7;
    javax.swing.JScrollPane jScrollPane8;
    javax.swing.JComboBox<String> menu;
    javax.swing.JPanel output;
    javax.swing.JTextArea processname;
    javax.swing.JTextArea processsize;
    javax.swing.JScrollPane scroll;
    java.awt.Button start_btn;
    // End of variables declaration//GEN-END:variables

    
    public static LinkedList stringtoLinkedList(String x,int type){
     int flag = 0, j,i=0;
     LinkedList v = new LinkedList();
     char[] c = new char[x.length()];
     c=x.toCharArray();
     String temp=new String();
        
        while (i!=x.length()){
            
            j=0;
            while ((c[i+j]!='\n') &&( c[i+j]!=' ')){
                temp=temp+c[i+j];
                j++;
                flag=1;
                if((i+j)==x.length())
                    break;
            }
            if(flag==1){
                if(type==0)
            v.add(Integer.parseInt(temp));
            else
                    v.add(temp);
                i=i+j;
            }
            else
                i++;
            flag=0;
            temp="";
    
        }
    
    return v;
    }
    public void Draw(LinkedList todraw)
    {
        
       /*******code to draw********** */     
       //JPanel output=new JPanel();
      //output.setLayout(new BorderLayout());
        output.removeAll();
        output.setLayout(new BoxLayout(output, BoxLayout.Y_AXIS));
       // output.setLayout(new BorderLayout());
        output.setAutoscrolls(true);
       
        JButton[] jj=new JButton[todraw.size()];
        for(int i=0;i<todraw.size();i++)
        {
        hole draw=new hole();
        draw=(hole) todraw.get(i);
        jj[i]=new JButton();
        //jj[i].setLayout(new BorderLayout());
        jj[i].setText("<html>"+Integer.toString(draw.getAddress())+"<br>"+draw.getName()+"==>"+draw.getSize()+
                "<br>"+Integer.toString(draw.getAddress()+draw.getSize())+"</html>");
        jj[i].setFont(new Font(jj[i].getFont().getName(), jj[i].getFont().getStyle(), 14));
        jj[i].setSize(80,70);
        if(i!=0)
        jj[i].setLocation(10,75+(jj[i-1].getLocation().y));
        else
        jj[i].setLocation(10, 20);
            
        if(draw.getisEmpty())
        jj[i].setBackground(Color.white);
        else
            jj[i].setBackground(Color.GRAY);
     
        jj[i].setForeground(Color.BLACK);
        jj[i].setOpaque(true);
       
       
        output.add(jj[i]);//,BoxLayout.Y_AXIS);
        
        
        output.updateUI(); 
        scroll.setViewportView(output);
        output.getParent().revalidate();
        output.getParent().repaint();
        
        }
    }

}
